import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from playwright.async_api import async_playwright
from datetime import datetime

API_TOKEN = 'YOUR_API_TOKEN'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

user_chat_ids = set()

#–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–≤–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã
url_to_server = {
    'https://portal.cherryservers.com/deployment?plan=804&tags=up_to_16': "AMD Ryzen‚Ñ¢ 7 7700X",
    'https://portal.cherryservers.com/deployment?plan=780&tags=up_to_16': "AMD Ryzen‚Ñ¢ 7950X"
}

@dp.message(Command("start"))
async def start_handler(message: Message):
    if message.chat.id not in user_chat_ids:
        user_chat_ids.add(message.chat.id)

# –°–ª–æ–≤–∞—Ä—å —Å —Ñ–ª–∞–≥–∞–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
country_flags = {
    "Lithuania": "üá±üáπ",
    "Netherlands": "üá≥üá±",
    "United States": "üá∫üá∏",
    "Singapore": "üá∏üá¨"
}

async def check_server_status():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        context = await browser.new_context(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36")
        page = await context.new_page()

        while True:
            for url, server_name in url_to_server.items():
                try:
                    await page.goto(url, timeout=90000)
                    await page.wait_for_load_state("networkidle", timeout=90000)
                    #await asyncio.sleep(20)

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏
                    message_text = ""

                    region_blocks = await page.query_selector_all(
                        "button.hover\\:border-zinc-300, button.border-blue-500")

                    for block in region_blocks:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
                        region_name_elem = await block.query_selector("div.text-sm.leading-snug.truncate")
                        if not region_name_elem:
                            region_name_elem = await block.query_selector("div.text-sm")

                        if region_name_elem:
                            region_name = await region_name_elem.inner_text()
                        else:
                            continue

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏–æ–Ω–∞
                        status_elem = await block.query_selector("div.text-xs")
                        if status_elem:
                            status_text = await status_elem.inner_text()
                        else:
                            status_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"

                        quantity_elem = await block.query_selector("div.text-center > div.text-base")
                        if quantity_elem:
                            quantity_text = await quantity_elem.inner_text()
                        else:
                            quantity_text = "0"

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –õ–∏—Ç–≤—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
                        country = region_name.split(",")[0]
                        if country == "Lithuania":
                            continue

                        flag = country_flags.get(country, "üè≥Ô∏è")

                        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä "In stock", –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if "In stock" in status_text:
                            message_text += (
                                f"C–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ {server_name} –¥–æ—Å—Ç—É–ø–Ω—ã –≤ " f"{region_name}{flag}\n"                                
                                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {quantity_text}\n\n"
                                f"–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: {url}\n\n\n"
                            )

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
                    if message_text:
                        for chat_id in user_chat_ids:
                            await bot.send_message(
                                chat_id=chat_id,
                                text=message_text,
                                parse_mode="HTML"
                            )

                except Exception as e:
                    print(f"{datetime.now()}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL {url}: {e}")

            #–ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await asyncio.sleep(10800)


async def main():
    dp.message.register(start_handler)
    asyncio.create_task(check_server_status())
    await dp.start_polling(bot, skip_updates=True)


if __name__ == '__main__':
    asyncio.run(main())
